{"version":3,"sources":["Components/Section.js","redux/contacts/contacts-selectors.js","Components/Form/Form.js","redux/contacts/contacts-operations.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","views/ContactsView.js"],"names":["Section","title","children","defaultProps","getFilter","state","contacts","filter","getContactsItems","items","getContactsFiltred","createSelector","filterValue","e","name","toLowerCase","includes","styles","form","width","connect","dispatch","addContacts","x","prepare","contact","number","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","useState","setName","setNomber","inputChange","currentTarget","value","className","onSubmit","preventDefault","length","alert","TextField","style","id","label","variant","type","pattern","required","onChange","target","useStyles","makeStyles","theme","margin","spacing","extendedIcon","marginRight","contactsFiltred","onDeleteContact","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","fetchContacts","a","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","classes","useEffect","map","Button","size","color","onClick","ContactsView","Container"],"mappings":"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","file":"static/js/4.75c88cf6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Section = ({ title, children }) => (\r\n    <div>\r\n        {title && <h2>{title}</h2>}\r\n        {children}\r\n    </div>\r\n);\r\n\r\nSection.defaultProps = {\r\n    title: \"\",\r\n    children: [],\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import { createSelector } from '@reduxjs/toolkit'; \r\n\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getContactsItems = state => state.contacts.items;\r\n\r\nexport const getContactsFiltred = createSelector(\r\n    [getFilter, getContactsItems],\r\n    (filterValue, contacts) => {\r\n  return contacts.filter(e => e.name.toLowerCase().includes(filterValue.toLowerCase())) ;\r\n});","import  { useState } from 'react';\r\nimport './Form.css';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/contacts/contacts-operations';\r\nimport { getContactsItems } from '../../redux/contacts/contacts-selectors';\r\nimport TextField from '@material-ui/core/TextField';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\n// import Button from '@material-ui/core/Button';\r\n\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 380,\r\n  }\r\n}\r\n// const useStyles = makeStyles((theme) => ({\r\n//   margin: {\r\n//     margin: theme.spacing(1),\r\n//   },\r\n//   extendedIcon: {\r\n//     marginRight: theme.spacing(1),\r\n//   },\r\n// }));\r\n\r\nfunction Form({contacts, addContacts }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNomber] = useState('');\r\n  // const classes = useStyles();\r\n  const inputChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name': setName(value); break;\r\n      case 'number': setNomber(value); break;\r\n      default: return;\r\n    }\r\n  };\r\n  const formSabmit = e => {\r\n    e.preventDefault();\r\n    if (contacts.filter(e => e.name === name).length === 0) {\r\n      addContacts({ name, number });\r\n    }\r\n    else {\r\n      alert(`${name} уже существует в контактах!`);\r\n    }\r\n    setNomber('');\r\n    setName('');\r\n  }\r\n  return (\r\n    <form className=\"form\" onSubmit={formSabmit}>\r\n      <TextField\r\n        style={styles.form}\r\n        id=\"outlined-basic\"\r\n        label=\"Имя\"\r\n        variant=\"outlined\"\r\n        type=\"text\"\r\n         name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={name}\r\n        onChange={inputChange}/>\r\n      <TextField\r\n        style={styles.form}\r\n        id=\"outlined-basic\"\r\n        label=\"Номер телефона\"\r\n        variant=\"outlined\"\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        value={number}\r\n        onChange={inputChange} />\r\n      {/* <Button variant=\"contained\" size=\"medium\" color=\"primary\" className={classes.margin} type=\"button\" title=\"submit\">\r\n        \r\n      </Button> */}\r\n      <button type=\"submit\">Добавить контакт</button>\r\n    </form>\r\n        );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n   return {contacts: getContactsItems(state)};\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n   return {\r\n     addContacts: x => dispatch(addContact(x))\r\n   };\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Form);","import { addContactRequest, addContactSuccess, addContactError, deleteContactError ,deleteContactRequest ,deleteContactSuccess,fetchContactsError,fetchContactsRequest ,fetchContactsSuccess } from \"./contacts-actions\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const addContact = prepare => dispatch => {\r\n    const contact = {\r\n        name: prepare.name,\r\n        number: prepare.number\r\n    };\r\n    dispatch(addContactRequest());    \r\n    \r\n    axios.post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest());\r\naxios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error)));   \r\n};\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n\r\n  // axios\r\n  //   .get('/todos')\r\n  //   .then(({ data }) => dispatch(fetchTodosSuccess(data)))\r\n  //   .catch(error => dispatch(fetchTodosError(error)));\r\n};\r\n","import \"./Filter.css\";\r\nimport { connect } from 'react-redux';\r\nimport {filter } from '../../redux/contacts/contacts-actions';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 320,\r\n  }\r\n}\r\nfunction Filter({ filter, inputChange }) {\r\n  return (\r\n    <TextField\r\n        style={styles.form}\r\n        id=\"outlined-basic\"\r\n        label=\"Поиск контакта по имени\"\r\n        variant=\"outlined\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={filter}\r\n        onChange={inputChange}/>\r\n    );\r\n};\r\nconst mapStateToProps = state => {\r\n   return {filter: getFilter(state)}\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n   return {\r\n     inputChange: (x) => dispatch(filter(x.target.value)),\r\n   };\r\n};    \r\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);\r\n","import { useEffect} from 'react';\r\nimport './ContactList.css';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact, fetchContacts } from '../../redux/contacts/contacts-operations';\r\nimport { getContactsFiltred } from '../../redux/contacts/contacts-selectors';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction ContactList({ contactsFiltred, onDeleteContact, fetchContacts }) {\r\n   const classes = useStyles();\r\n   useEffect(() => {\r\n      fetchContacts()\r\n  }, [fetchContacts]);\r\n   return (\r\n   <ul className=\"ContactList\">\r\n      {contactsFiltred.map(contact =>\r\n         <li key={contact.id} >\r\n            <p>{contact.name}: {contact.number}</p>\r\n            <Button variant=\"contained\" size=\"small\" color=\"primary\" className={classes.margin} type=\"button\" onClick={()=>onDeleteContact(contact.id)}>\r\n              Удалить\r\n            </Button>\r\n         </li>\r\n      )}\r\n   </ul> \r\n);\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n   return {contactsFiltred: getContactsFiltred(state)};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\r\n   return {\r\n      onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n      fetchContacts: ()  => dispatch(fetchContacts()),\r\n   };\r\n};\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactList);","import Section from '../Components/Section';\r\nimport Form from '../Components/Form';\r\nimport Filter from '../Components/Filter';\r\nimport ContactList from '../Components/ContactList';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nexport default function ContactsView() {\r\n      return (\r\n          <Container >\r\n              <Section title=\"Телефонная книга\">\r\n                <Form />\r\n              </Section>\r\n              <Section title=\"Контакты\">\r\n                <Filter />\r\n                <ContactList />\r\n          </Section>\r\n        </Container>\r\n            \r\n        )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n "],"sourceRoot":""}